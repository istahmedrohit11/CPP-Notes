#include<iostream>
using namespace std;

bool isBeautiful(int year){
    int digitCount[10]={0};
    while(year>0){
        int d=year%10;
        if(digitCount[d]==1){
            return false;
        }
        digitCount[d]=1;
        year=year/10;
    }
    return true;
}
   
int main(){
   int n=1987;
   int year=n+1;

   while(!isBeautiful(year)){
    year++;
   }
   cout<<year<<endl;
}

/* 
 year = 1988
digit_count = {0,0,0,0,0,0,0,0,0,0}

Extract 8 → digit_count[8] = 1

Extract 8 again → already 1 → ❌ Not beautiful

2. year = 1989
Digits = 9, 8, 8, 1

Extract 9 → mark

Extract 8 → mark

Extract 8 again → duplicate → ❌ Not beautiful

3. year = 1990
Digits = 0, 9, 9, 1

Extract 0 → mark

Extract 9 → mark

Extract 9 again → duplicate → ❌

4. year = 1991
Digits = 1, 9, 9, 1

Extract 1 → mark

Extract 9 → mark

Extract 9 again → ❌

5. year = 1992
Digits = 2, 9, 9, 1

Duplicate 9 → ❌

6. year = 1993
Digits = 3, 9, 9, 1

Duplicate 9 → ❌

7. year = 1994
Digits = 4, 9, 9, 1

Duplicate 9 → ❌

8. year = 1995
Digits = 5, 9, 9, 1

Duplicate 9 → ❌

...
We skip showing similar failures until something changes.

Skipping ahead to:
21. year = 2013
Digits extracted:

3 → not seen → mark digit_count[3] = 1

1 → not seen → mark digit_count[1] = 1

0 → not seen → mark digit_count[0] = 1

2 → not seen → mark digit_count[2] = 1

All digits are unique → ✅ Beautiful
*/
