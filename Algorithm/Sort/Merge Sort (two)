#include<iostream>
#include<vector>
using namespace std;

void merge(vector<int>&arr,int st,int mid,int end){
    vector<int>temp;
    int i=st,j=mid+1;

    while(i<=mid && j<=end){
        if(arr[i]<=arr[j]){ //assending order 
                            //desending order arr[i]>=arr[j])
            temp.push_back(arr[i]);
            i++;
        }else{
            temp.push_back(arr[j]);
            j++;
        }

    }
    while(i<=mid){
        temp.push_back(arr[i]);
        i++;
    }
    while(j<=end){
        temp.push_back(arr[j]);
        j++;
    }
    for(int idx=0;idx<temp.size();idx++){
        arr[idx+st]=temp[idx];
    }
}

void mergeSort(vector<int>&arr,int st,int end){
    if(st<end){
        int mid=st+(end-st)/2;

        mergeSort(arr,st,mid); //left
        mergeSort(arr,mid+1,end);//left

        merge(arr,st,mid,end);
    }
}
int main(){
    vector<int>arr={12,31,35,8,32,17};
    mergeSort(arr,0,arr.size()-1);
    for(int val:arr){
        cout<<val<<" ";

    }
    cout<<endl;
}
/* 
MERGE_SORT(A, start, end)
    if start < end then
        mid ← (start + end) / 2
        MERGE_SORT(A, start, mid)
        MERGE_SORT(A, mid + 1, end)
        MERGE(A, start, mid, end)

MERGE(A, start, mid, end)
    create empty list TEMP
    i ← start
    j ← mid + 1

    while i ≤ mid and j ≤ end do
        if A[i] ≤ A[j] then
            append A[i] to TEMP
            i ← i + 1
        else
            append A[j] to TEMP
            j ← j + 1

    while i ≤ mid do
        append A[i] to TEMP
        i ← i + 1

    while j ≤ end do
        append A[j] to TEMP
        j ← j + 1

    for k from 0 to length(TEMP) - 1 do
        A[start + k] ← TEMP[k]

*/
